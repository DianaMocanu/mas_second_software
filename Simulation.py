from random import randrangefrom interface_agent import InterfaceAgent, InterfaceAgentState, InterfaceEnvironment, initialMap, MockedInterfacefrom upgrading_agent import UpgradingAgent, UpgradingAgentState, UpgradingAgentEnv, \    clicked_and_zoom_mapclass MainSimulation:    def __init__(self):        # create the main interface agents        self.startCreatingInterface()        self.simulateUserInterfaceInteraction()    def simulateUserInterfaceInteraction(self):        n = randrange(120)        for i in range(0, n):            self.startUpgrading()        self.makeChangedToTheInterface()    def startCreatingInterface(self):        self.agents = []        for i in range(0, 6):            for j in range(0, 6):                if initialMap[i][j] != MockedInterface.EMPTY:                    interface_state = InterfaceAgentState()                    interface_state.setAgentX([i])                    interface_state.setAgentY([j])                    interface_agent = InterfaceAgent()                    interface_env = InterfaceEnvironment(interface_state, interface_agent)                    self.agents.append(interface_env)    def makeChangedToTheInterface(self):        for env in self.agents:            env.state.showMap()            interface_perception = env.getPercent(env.agent)            env.agent.see(interface_perception)            action = env.agent.takeAction()            if(action):                env.updateState(action)            env.state.showMap()            # self.interface_state.showMap()    def startUpgrading(self):        for i in range (0, 6):            for j in range(0,6):                self.upgrading_agent_init_state = UpgradingAgentState()                self.upgrading_agent_init_state.setAgentX(i)                self.upgrading_agent_init_state.setAgentY(j)                self.upgrading_agent_env = UpgradingAgentEnv(self.upgrading_agent_init_state)                self.upgrading_agent = UpgradingAgent()                perception = self.upgrading_agent_env.getPercept(self.upgrading_agent)                self.upgrading_agent.see(perception)                action = self.upgrading_agent.takeAction()                if (action):                    self.upgrading_agent_env.updateState(action)if __name__ == '__main__':    MainSimulation()
import multiprocessingfrom random import randrangeimport threading, timefrom interface_agent import InterfaceAgent, InterfaceAgentState, InterfaceEnvironment, initialMap, MockedInterfacefrom preference_agent import MessageEnumfrom upgrading_agent import UpgradingAgent, UpgradingAgentState, UpgradingAgentEnv, \    clicked_and_zoom_mapfrom matplotlib import pyplotclass MainSimulation:    def __init__(self):        # create the main interface agents        self.lengthX = len(initialMap[0])        pyplot.figure(figsize=(self.lengthX, self.lengthX))        pyplot.imshow(initialMap)        pyplot.show()        self.startCreatingInterface()        # parent_conn, child_conn = multiprocessing.Pipe()        q = multiprocessing.Queue()        p1 = multiprocessing.Process(target=self.simulateUserInterfaceInteraction, args=(q,))        # p2 = multiprocessing.Process(target=self.makeChangedToTheInterface, args=(child_conn, q))        p1.start()        p1.join()        self.makeChangedToTheInterface(q)        # self.simulateUserInterfaceInteraction()    def simulateUserInterfaceInteraction(self, queue):        n = randrange(120)        for i in range(0, n):            threading.Thread(target=self.startUpgrading).start()        while threading.active_count() > 1:            time.sleep(0.2)        pyplot.figure(figsize=(len(clicked_and_zoom_map[0]), len(clicked_and_zoom_map[0])))        pyplot.imshow(clicked_and_zoom_map)        print(clicked_and_zoom_map)        pyplot.show()        queue.put(clicked_and_zoom_map)        # conn.send(MessageEnum.END)    def startCreatingInterface(self):        self.agents = []        for i in range(0, self.lengthX):            for j in range(0, self.lengthX):                if initialMap[i][j] != MockedInterface.EMPTY:                    threading.Thread(target=self.createInterfaceAgent, args=[i,j]).start()        while threading.active_count() > 1:            time.sleep(0.2)    def createInterfaceAgent(self, i, j):        interface_state = InterfaceAgentState()        interface_state.setAgentX([i])        interface_state.setAgentY([j])        interface_agent = InterfaceAgent()        interface_env = InterfaceEnvironment(interface_state, interface_agent)        self.agents.append(interface_env)    def makeChangedToTheInterface(self, queue):        # print(clicked_and_zoom_map)        # while True:        #     msg = conn.recv()  # Read from the output pipe and do nothing        #     if msg == MessageEnum.END:        #         break            # clicked_and_zoom_map = msg        while queue.empty() is False:            clicked_and_zoom_map = queue.get()            for env in self.agents:                interface_perception = env.getPercent(env.agent)                interface_perception.setClickedAndZoomedMap(clicked_and_zoom_map)                env.agent.see(interface_perception)                action = env.agent.takeAction()                if(action):                    env.updateState(action)                env.state.showMap()            # self.interface_state.showMap()    def startUpgrading(self):        for i in range (0, self.lengthX):            for j in range(0,self.lengthX):                self.upgrading_agent_init_state = UpgradingAgentState()                self.upgrading_agent_init_state.setAgentX(i)                self.upgrading_agent_init_state.setAgentY(j)                self.upgrading_agent_env = UpgradingAgentEnv(self.upgrading_agent_init_state)                self.upgrading_agent = UpgradingAgent()                perception = self.upgrading_agent_env.getPercept(self.upgrading_agent)                self.upgrading_agent.see(perception)                action = self.upgrading_agent.takeAction()                if (action):                    self.upgrading_agent_env.updateState(action)if __name__ == '__main__':    MainSimulation()